
 GIT
 SIstema de control de versiones
____________________________________________________

 Working directory ----> Staging area ----> Repository

 1. Instalar GIT
 2. Establecer email y usuario

	- git config --global user.name "Rafael Gini"
	- git config --global user.email rafagini6@gmail.com

 3. Comprobar La configuración
	
	- git config --list
	- git config user.name
	- git config user.email

 4. Ayuda

	- git help config
	- git config --help
	- man git-config

 5. Terminal

	- HELP (comandos disponibles)
	- dir (Ver el contenido de una carpeta)
	- cd (change directory)
	- cls (limpiar la consola)
	- mkdir (Crear un directorio)
	- rmdir (Remvoer un directorio)
	- mv / copy (move archivo destino)
	- del (eliminar archivos de forma permanente)

 6. Repositorios

 "Espacio donde se almacena, organiza, mantiene y difunde información / archivos"

	- git init (Crea un repositorio nuevo en Git en la carpeta donde nos encontremos. git inir nombreCarpeta para crear una carpeta nueva con un repositiorio)
	- git status (Estado de nuestro repositorio)
	- git add nombreArchivo o git add . (Para añadir archivos al staging area y git staus para verificar)
	- git commit -m "Comentario acerca del commit" (Para pasar los archivos al repositorio local y comprometerlos)
	- git log (ver la rama en la que estamos y todos los commits que se hicieron)
	- git log --oneline (Listar los commits realizados de una manera mas prolija)

 7. Ramas

 "Para moficiar o agregar codigo, crear ramas para alojar el trabajo y no pisar el trabajo original, son muy bueans para experimentar"

	- git branch (Ver en que rama estoy)
	- git branch mi_rama (Crear una nueva rama)
	- git branch -l (ver todas las ramas y en cual estoy)
	- git checkout mi_rama (Para cambiarnos de rama y verificar con git branch -l)
	- git branch -D mi_rama (Eliminar rama, primero estar en la rama master y luego borrar mi_rama)

 8. Commits

 "Navegar entre commits y versiones"

	- git log --oneline (Listar los commits realizados de una manera mas prolija)
	- git checkout 6bsff19 (o número de commit)

 9. GIT MERGE

 "Fucioanr una rama experimental con nuestra rama master"

	1. git checkout master (Porque es donde quiero fusionar los cambios)
	2. git branch (Para verificar que estemos en master)
	3. git merge mi_rama (Para fusionar)

_______________________________________________________________________________________________________________________________________________________________________________

 GITHUB 
 Red social de programadores y hosting de proyectos

 1. Cuenta

	- Crear una cuenta en GitHub (El mail debe ser el que se usó en el repositorio GIT)
	- Crear un nuevo repositorio en GitHub y setearlo como publico

 2. Subir Repositorio

	- cd <ubicación de la carpeta> (Para pararnos en la carpeta y repositorio)
	- git remote add origin https://github.com/miuser/mi_repositorio.git (El link tiene que ser el que se indica al crear el repositorio)
	- git push -u origin master (Para subir el proyecto entero)

 3. GitHub Pages

	- Settings del repossitrio
	- Activar GitHub Pages
	- Seleccionar la rama
	- Guardar



 

